#!/bin/bash

# In retrospect I'd have preferred a python script, but hey this works.
#
# https://claude.ai/chat/baf4d2fd-ddbe-4852-9361-91c0a091f40c
#
# https://claude.site/artifacts/9b588d36-cf7e-4bf9-aed1-187adc0b8ef7
#
# > How can I automatically delete my local git branches if the
# > associated github PR has been merged (the remote branch is on the
# > main git repo)?  Would also be great if this mechanism verified
# > that the merged version was the same as the branch
#
# ---
#
# > The PRs are squashed and rebased on merge, so they won't appear in
# > the history.  I think maybe use of github's API or the "hub" cli
# > tool will be needed
#
# ---
#
# > Please add a dry-run mode that does not delete any branches, but
# > lists the ones that would be deleted
#
# ---
#
# > It works!  Looks like "git branch" includes prefixes like "*" and
# > "+" on current branches, maybe its invocation should be somehow
# > updated?
#
# ---
#
# > Please update this to default to dry run mode and only do it if
# > the argument "--apply" is passed
#
# ---
#
# > When PRs are merged to main, the first line of the message will
# > have a (#PR_NUMBER) suffix.  Please add code to check that the
# > diff of the merged PR is identical to the diff of the branch
# > relative to its merge base
#
# > /home/mgsloan/.local/bin/delete-merged-branches-fancy: line 55: syntax error near unexpected token }'
# >
# > /home/mgsloan/.local/bin/delete-merged-branches-fancy: line 55:     }'
#
# ---
#
# > Please add the following:
# >
# > * In dry run mode (no `--apply`) also list the branches that differ
# >   from what was merged.
# >
# > * Add a `--diff branch-name` option that shows the diff with what
# >   was merged.  When encountering branches that have diffs, put the
# >   command to run in the output
#
# ---
#
# With manual fix adding "--state merged" to gh pr list

#!/bin/bash

# Default to dry-run mode
DRY_RUN=true
SHOW_DIFF=""

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --apply)
            DRY_RUN=false
            echo "Running in apply mode - branches will be deleted"
            shift
            ;;
        --diff)
            if [ -z "$2" ]; then
                echo "Error: --diff requires a branch name"
                exit 1
            fi
            SHOW_DIFF="$2"
            shift 2
            ;;
        *)
            echo "Unknown option: $1"
            exit 1
            ;;
    esac
done

if [ "$DRY_RUN" = true ]; then
    echo "Running in dry-run mode - no branches will be deleted"
    echo "Use --apply to actually delete branches"
fi

# Ensure gh CLI is installed
if ! command -v gh &> /dev/null; then
    echo "GitHub CLI (gh) is not installed. Please install it first:"
    echo "https://cli.github.com/"
    exit 1
fi

# Ensure user is authenticated with gh
if ! gh auth status &> /dev/null; then
    echo "Please authenticate with GitHub first using: gh auth login"
    exit 1
fi

# Function to get PR status for a branch
get_pr_status() {
    local branch=$1
    # Get PR number and state, plus merge commit info
    pr_info=$(gh pr list --head "$branch" --json number,state,mergeCommit,title,headRefName --state merged -L 1)
    echo "$pr_info"
}

# Function to get diff command for a branch and PR
get_diff_command() {
    local branch=$1
    local pr_number=$2
    local merge_base=$(git merge-base $branch main)
    local merge_commit=$(git log main --grep="(#$pr_number)" -n 1 --format="%H")
    echo "$0 --diff $branch"
}

# Function to show diff between branch and merged PR
show_branch_diff() {
    local branch=$1
    local pr_number=$2

    echo "Showing diff for branch $branch (PR #$pr_number)..."

    # Get the merge base commit
    merge_base=$(git merge-base $branch main)
    if [ $? -ne 0 ]; then
        echo "Failed to find merge base for $branch"
        return 1
    fi

    # Get the commit message of the merge to find PR number
    merge_commit=$(git log main --grep="(#$pr_number)" -n 1 --format="%H")
    if [ -z "$merge_commit" ]; then
        echo "Could not find merge commit for PR #$pr_number"
        return 1
    fi

    # Create temporary files for diffs
    local_diff_file=$(mktemp)
    pr_diff_file=$(mktemp)

    # Get the diffs
    git diff $merge_base $branch > "$local_diff_file"
    git diff ${merge_commit}^1 $merge_commit > "$pr_diff_file"

    # Show the diff between the diffs
    diff -u "$pr_diff_file" "$local_diff_file"

    rm "$local_diff_file" "$pr_diff_file"
}

# Function to verify PR content matches branch
verify_pr_content() {
    local branch=$1
    local pr_number=$2

    echo "Verifying content matches for PR #$pr_number..."

    # Get the merge base commit
    merge_base=$(git merge-base $branch main)
    if [ $? -ne 0 ]; then
        echo "Failed to find merge base for $branch"
        return 1
    fi

    # Get the commit message of the merge to find PR number
    merge_commit=$(git log main --grep="(#$pr_number)" -n 1 --format="%H")
    if [ -z "$merge_commit" ]; then
        echo "Could not find merge commit for PR #$pr_number"
        return 1
    fi

    # Create temporary files for diffs
    local_diff_file=$(mktemp)
    pr_diff_file=$(mktemp)

    # Get the diff of the local branch against merge base
    git diff $merge_base $branch > "$local_diff_file"

    # Get the diff of the merge commit against its parent
    git diff ${merge_commit}^1 $merge_commit > "$pr_diff_file"

    # Compare diffs, ignoring whitespace and comments
    if diff -Bw "$local_diff_file" "$pr_diff_file" > /dev/null; then
        echo "✓ Branch content matches merged PR"
        rm "$local_diff_file" "$pr_diff_file"
        return 0
    else
        echo "✗ Branch content differs from merged PR"
        echo "  This could mean:"
        echo "  - The branch has new commits after the PR was merged"
        echo "  - The PR was modified during merge"
        echo "  To see the diff, run: $(get_diff_command "$branch" "$pr_number")"
        rm "$local_diff_file" "$pr_diff_file"
        return 1
    fi
}

# If --diff is specified, just show the diff and exit
if [ -n "$SHOW_DIFF" ]; then
    # Find PR number for the branch
    pr_info=$(get_pr_status "$SHOW_DIFF")
    if [ -z "$pr_info" ]; then
        echo "No PR found for branch $SHOW_DIFF"
        exit 1
    fi
    pr_number=$(echo "$pr_info" | jq -r '.[0].number')
    if [ "$pr_number" = "null" ]; then
        echo "Could not get PR number for branch $SHOW_DIFF"
        exit 1
    fi
    show_branch_diff "$SHOW_DIFF" "$pr_number"
    exit 0
fi

# Track branches that would be deleted
branches_to_delete=()
# Track branches that have differences
branches_with_diffs=()

# Ensure we're up to date with remote
git fetch origin

# Get list of local branches
local_branches=$(git branch --format="%(refname:short)")

for branch in $local_branches; do
    # Skip main/master branch
    if [ "$branch" = "main" ] || [ "$branch" = "master" ]; then
        continue
    fi

    echo "Checking branch: $branch"

    # Get PR status
    pr_info=$(get_pr_status "$branch")

    if [ -z "$pr_info" ]; then
        echo "No PR found for branch $branch"
        if [ "$DRY_RUN" = true ]; then
            echo "Would prompt for deletion confirmation in apply mode"
        else
            read -p "No PR found. Delete this branch? (y/N) " -n 1 -r
            echo
            if [[ $REPLY =~ ^[Yy]$ ]]; then
                git branch -D "$branch"
            fi
        fi
        continue
    fi

    # Check if PR is merged
    if echo "$pr_info" | jq -e '.[0].state == "MERGED"' &> /dev/null; then
        pr_number=$(echo "$pr_info" | jq -r '.[0].number')
        echo "PR #$pr_number for branch $branch was merged"

        # Verify content matches
        if verify_pr_content "$branch" "$pr_number"; then
            if [ "$DRY_RUN" = true ]; then
                branches_to_delete+=("$branch")
                echo "Would delete branch $branch"
            else
                echo "Deleting branch..."
                git branch -D "$branch"
            fi
        else
            if [ "$DRY_RUN" = true ]; then
                branches_with_diffs+=("$branch")
            fi
            echo "Skipping branch deletion due to content mismatch"
        fi
    else
        pr_number=$(echo "$pr_info" | jq -r '.[0].number')
        if [ "$pr_number" != "null" ]; then
            pr_state=$(echo "$pr_info" | jq -r '.[0].state')
            echo "PR #$pr_number is still $pr_state. Keeping branch."
        fi
    fi
done

# Show summary
echo
if [ ${#branches_to_delete[@]} -gt 0 ]; then
    if [ "$DRY_RUN" = true ]; then
        echo "Branches that would be deleted:"
    else
        echo "Branches deleted:"
    fi
    printf '%s\n' "${branches_to_delete[@]}"
fi

if [ "$DRY_RUN" = true ] && [ ${#branches_with_diffs[@]} -gt 0 ]; then
    echo
    echo "Branches that differ from their merged state:"
    for branch in "${branches_with_diffs[@]}"; do
        pr_number=$(get_pr_status "$branch" | jq -r '.[0].number')
        echo "$branch (PR #$pr_number)"
        echo "  To see diff: $(get_diff_command "$branch" "$pr_number")"
    done
fi
