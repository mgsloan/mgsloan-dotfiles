#!/bin/bash

# In retrospect I'd have preferred a python script, but hey this works.
#
# https://claude.ai/chat/baf4d2fd-ddbe-4852-9361-91c0a091f40c
#
# https://claude.site/artifacts/9b588d36-cf7e-4bf9-aed1-187adc0b8ef7
#
# > How can I automatically delete my local git branches if the
# > associated github PR has been merged (the remote branch is on the
# > main git repo)?  Would also be great if this mechanism verified
# > that the merged version was the same as the branch
#
# ---
#
# > The PRs are squashed and rebased on merge, so they won't appear in
# > the history.  I think maybe use of github's API or the "hub" cli
# > tool will be needed
#
# ---
#
# > Please add a dry-run mode that does not delete any branches, but
# > lists the ones that would be deleted
#
# ---
#
# > It works!  Looks like "git branch" includes prefixes like "*" and
# > "+" on current branches, maybe its invocation should be somehow
# > updated?
#
# ---
#
# > Please update this to default to dry run mode and only do it if
# > the argument "--apply" is passed
#
# ---
#
# > When PRs are merged to main, the first line of the message will
# > have a (#PR_NUMBER) suffix.  Please add code to check that the
# > diff of the merged PR is identical to the diff of the branch
# > relative to its merge base
#
# > /home/mgsloan/.local/bin/delete-merged-branches-fancy: line 55: syntax error near unexpected token }'
# >
# > /home/mgsloan/.local/bin/delete-merged-branches-fancy: line 55:     }'
#
# ---
#
# > Please add the following:
# >
# > * In dry run mode (no `--apply`) also list the branches that differ
# >   from what was merged.
# >
# > * Add a `--diff branch-name` option that shows the diff with what
# >   was merged.  When encountering branches that have diffs, put the
# >   command to run in the output
#
# ---
#
# > Please add support for deleting branches for closed PRs.  In dry
# > run mode these should be shown in a separate list.  They should
# > only be deleted if `--include_closed` is passed
#
# ---
#
# > "gh pr list" defaults to filtering to just open prs.  Please use
# > `--state all` to include all states.  To make this more correct,
# > please also remove the `-L 1` and parse multiple results from it.
# >
# > * When any have `state` set to `open`, the branch shouldn't be
# >   deleted.
# >
# > * Use the first one that has `state` of `merged` for purposes of
# >   comparison.
# >
# > * When all PRs are `closed`, they are only deleted with
# >   `--include_closed`, but are always listed in dry run mode
#
# ---
#
# > Please change --include_closed to --include-closed.
# >
# > In the case where a PR is not found do not ask about deleting the
# > branch - branch should never be deleted in this case.

#!/bin/bash

# Default to dry-run mode
DRY_RUN=true
SHOW_DIFF=""
INCLUDE_CLOSED=false

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --apply)
            DRY_RUN=false
            echo "Running in apply mode - branches will be deleted"
            shift
            ;;
        --diff)
            if [ -z "$2" ]; then
                echo "Error: --diff requires a branch name"
                exit 1
            fi
            SHOW_DIFF="$2"
            shift 2
            ;;
        --include-closed)
            INCLUDE_CLOSED=true
            echo "Including branches with closed (unmerged) PRs"
            shift
            ;;
        *)
            echo "Unknown option: $1"
            exit 1
            ;;
    esac
done

if [ "$DRY_RUN" = true ]; then
    echo "Running in dry-run mode - no branches will be deleted"
    echo "Use --apply to actually delete branches"
    if [ "$INCLUDE_CLOSED" = false ]; then
        echo "Use --include_closed to include branches with closed (unmerged) PRs"
    fi
fi

# Ensure gh CLI is installed
if ! command -v gh &> /dev/null; then
    echo "GitHub CLI (gh) is not installed. Please install it first:"
    echo "https://cli.github.com/"
    exit 1
fi

# Ensure user is authenticated with gh
if ! gh auth status &> /dev/null; then
    echo "Please authenticate with GitHub first using: gh auth login"
    exit 1
fi

# Function to get PR status for a branch
get_pr_status() {
    local branch=$1
    # Get all PRs for this branch
    pr_info=$(gh pr list --head "$branch" --state all --json number,state,mergeCommit,title,headRefName)
    echo "$pr_info"
}

# Function to analyze PR states for a branch
analyze_pr_states() {
    local pr_info=$1
    local branch=$2

    # Check if we have any PRs
    if [ "$(echo "$pr_info" | jq length)" -eq 0 ]; then
        echo "no_pr"
        return
    fi

    # Check for any open PRs
    if echo "$pr_info" | jq -e '.[] | select(.state == "OPEN")' &> /dev/null; then
        echo "open"
        return
    fi

    # Look for merged PRs
    local merged_pr=$(echo "$pr_info" | jq -r '[.[] | select(.state == "MERGED")] | first')
    if [ "$merged_pr" != "null" ] && [ -n "$merged_pr" ]; then
        echo "merged"
        return
    fi

    # If we get here, all PRs must be closed
    echo "closed"
}

# Function to get merged PR info
get_merged_pr() {
    local pr_info=$1
    echo "$pr_info" | jq -r '[.[] | select(.state == "MERGED")] | first'
}

# [Previous diff-related functions remain the same]
# ... [keeping them for brevity]

# Track different types of branches
branches_to_delete=()
branches_with_diffs=()
closed_branches_to_delete=()

# Ensure we're up to date with remote
git fetch origin

# Get list of local branches
local_branches=$(git branch --format="%(refname:short)")
for branch in $local_branches; do
    # Skip main/master branch
    if [ "$branch" = "main" ] || [ "$branch" = "master" ]; then
        continue
    fi

    echo "Checking branch: $branch"

    # Get PR status
    pr_info=$(get_pr_status "$branch")

    # Analyze PR states
    pr_state=$(analyze_pr_states "$pr_info" "$branch")

    case $pr_state in
        no_pr)
            echo "No PRs found for branch $branch - keeping branch"
            ;;

        open)
            echo "Branch $branch has open PRs - keeping branch"
            ;;

        merged)
            merged_pr=$(get_merged_pr "$pr_info")
            pr_number=$(echo "$merged_pr" | jq -r '.number')
            echo "PR #$pr_number for branch $branch was merged"

            # Verify content matches
            if verify_pr_content "$branch" "$pr_number"; then
                if [ "$DRY_RUN" = true ]; then
                    branches_to_delete+=("$branch")
                    echo "Would delete branch $branch"
                else
                    echo "Deleting branch..."
                    git branch -D "$branch"
                fi
            else
                if [ "$DRY_RUN" = true ]; then
                    branches_with_diffs+=("$branch")
                fi
                echo "Skipping branch deletion due to content mismatch"
            fi
            ;;

        closed)
            # Get all PR numbers for display
            pr_numbers=$(echo "$pr_info" | jq -r '[.[] | .number] | join(", ")')
            echo "All PRs ($pr_numbers) for branch $branch were closed without merging"
            if [ "$INCLUDE_CLOSED" = true ]; then
                if [ "$DRY_RUN" = true ]; then
                    closed_branches_to_delete+=("$branch")
                    echo "Would delete closed branch $branch"
                else
                    echo "Deleting closed branch..."
                    git branch -D "$branch"
                fi
            else
                closed_branches_to_delete+=("$branch")
                echo "Skipping closed branch (use --include-closed to delete)"
            fi
            ;;

        *)
            echo "Error: Unknown state $pr_state for branch $branch"
            ;;
    esac
done

# Show summary
echo
if [ ${#branches_to_delete[@]} -gt 0 ]; then
    if [ "$DRY_RUN" = true ]; then
        echo "Branches with merged PRs that would be deleted:"
    else
        echo "Branches with merged PRs that were deleted:"
    fi
    printf '%s\n' "${branches_to_delete[@]}"
fi

if [ ${#closed_branches_to_delete[@]} -gt 0 ]; then
    echo
    if [ "$INCLUDE_CLOSED" = true ] && [ "$DRY_RUN" = false ]; then
        echo "Branches with closed (unmerged) PRs that were deleted:"
    else
        echo "Branches with closed (unmerged) PRs that would be deleted with --include_closed:"
    fi
    printf '%s\n' "${closed_branches_to_delete[@]}"
fi

if [ "$DRY_RUN" = true ] && [ ${#branches_with_diffs[@]} -gt 0 ]; then
    echo
    echo "Branches that differ from their merged state:"
    for branch in "${branches_with_diffs[@]}"; do
        pr_info=$(get_pr_status "$branch")
        merged_pr=$(get_merged_pr "$pr_info")
        pr_number=$(echo "$merged_pr" | jq -r '.number')
        echo "$branch (PR #$pr_number)"
        echo "  To see diff: $(get_diff_command "$branch" "$pr_number")"
    done
fi
